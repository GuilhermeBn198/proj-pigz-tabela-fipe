security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~

    access_control:
        # 1) Somente ADMIN pode deletar usuário
        - { path: ^/api/users/\d+$, methods: [DELETE], roles: ROLE_ADMIN }

        # 2) GET e PATCH em /api/users/{id} → admin ou o próprio usuário
        - { path: ^/api/users/\d+$, methods: [GET,PATCH], roles: [ROLE_ADMIN, ROLE_USER] }

        # 3) Listagem de todos usuários → só ADMIN
        - { path: ^/api/users$, methods: [GET], roles: ROLE_ADMIN }

        # 4) registro e login continuam públicos
        - { path: ^/api/register$, roles: PUBLIC_ACCESS }
        - { path: ^/api/login$, roles: PUBLIC_ACCESS }

        # 5) todo o resto da API exige autenticação
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }


when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
